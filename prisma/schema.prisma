// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Plan {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  vision     String   @default("")
  milestone  String   @default("")
  completed  Boolean  @default(false)
  started    Boolean  @default(false)
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  created    DateTime @default(now())
  lastUpdate DateTime @updatedAt @map("last_update")

  goals Goal[]

  @@map("plans")
}

model Goal {
  id      String @id @default(cuid())
  planId  String @map("plan_id")
  content String
  status  String @default("1")

  plan        Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  goalHistory GoalHistory[]
  strategies  Strategy[]
  indicators  Indicator[]

  @@index([planId])
  @@map("goals")
}

model GoalHistory {
  id       String @id @default(cuid())
  goalId   String @map("goal_id")
  planId   String @map("plan_id")
  sequence Int

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([planId])
  @@map("goal_history")
}

model Strategy {
  id        String   @id @default(cuid())
  goalId    String   @map("goal_id")
  planId    String   @map("plan_id")
  content   String
  weeks     String[]
  status    String   @default("1")
  frequency Int

  goal            Goal              @relation(fields: [goalId], references: [id], onDelete: Cascade)
  strategyHistory StrategyHistory[]

  @@index([goalId])
  @@index([planId])
  @@map("strategies")
}

model StrategyHistory {
  id          String    @id @default(cuid())
  strategyId  String    @map("strategy_id")
  planId      String    @map("plan_id")
  overdue     Boolean   @default(false)
  completed   Boolean   @default(false)
  firstUpdate DateTime? @map("first_update")
  lastUpdate  DateTime? @map("last_update")
  sequence    Int
  frequencies Boolean[] @default([])

  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId])
  @@index([planId])
  @@map("strategy_history")
}

model Indicator {
  id           String @id @default(cuid())
  goalId       String @map("goal_id")
  planId       String @map("plan_id")
  content      String
  metric       String
  initialValue Int    @map("initial_value")
  goalValue    Int    @map("goal_value")
  status       String @default("1")

  goal             Goal               @relation(fields: [goalId], references: [id], onDelete: Cascade)
  indicatorHistory IndicatorHistory[]

  @@index([goalId])
  @@index([planId])
  @@map("indicators")
}

model IndicatorHistory {
  id          String @id @default(cuid())
  indicatorId String @map("indicator_id")
  planId      String @map("plan_id")
  value       Int    @default(0)
  sequence    Int

  indicator Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@index([indicatorId])
  @@index([planId])
  @@map("indicator_history")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  planId     String   @map("plan_id")
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  type       String
  message    String
  status     String
  sendDate   DateTime @map("send_date")
  created    DateTime @default(now())
  lastUpdate DateTime @updatedAt @map("last_update")

  @@index([entityType, entityId])
  @@map("notifications")
}

model Waitlist {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  position    Int       @unique @default(0)
  invited     Boolean   @default(false)
  inviteToken String?   @unique @map("invite_token")
  invitedAt   DateTime? @map("invited_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([email, id, inviteToken])
  @@map("waitlist")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  email     String?
  feedback  String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("feedbacks")
}

model User {
  id           String        @id @default(cuid())
  auth0Id      String?       @map("auth0_id")
  email        String        @unique
  role         Role          @default(USER)
  waitlistId   String?       @unique @map("waitlist_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  Subscription Subscription?

  @@index([email, id, waitlistId, role])
  @@map("users")
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status      SubscriptionStatus @default(ACTIVE)
  plan        SubscriptionPlan
  startedAt   DateTime           @default(now()) @map("started_at")
  expiresAt   DateTime?          @map("expires_at")
  renewalDate DateTime?          @map("renewal_date")
  canceledAt  DateTime?          @map("canceled_at")
  trialEndsAt DateTime?          @map("trial_ends_at")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  @@index([userId, status])
  @@map("subscriptions")
}

enum Role {
  GUEST // Anonymous or non-authenticated users (local storage only)
  USER // Regular free users with authentication
  SUBSCRIBER // Paying customers with remote DB access
  ADMIN // Internal admin users with full platform access
  SUPERADMIN // Highest-level access, useful for system-level control
}

enum SubscriptionStatus {
  ACTIVE // The user has an active subscription
  TRIAL // The user is in a trial period
  CANCELED // The user has canceled but may still have access until the period ends
  EXPIRED // The subscription is fully expired; no access
  PAUSED // The subscription is temporarily paused (e.g., billing issue)
  PENDING // Subscription is awaiting payment or confirmation
  GRACE_PERIOD // Subscription expired but the user has extra days to renew
  RENEWAL_DUE // Subscription is active but needs renewal soon
  FAILED // Payment failed
  UPCOMING // Subscription is scheduled to start in the future
}

enum SubscriptionPlan {
  FREE // Free-tier users (local storage only)
  BASIC // Entry-level paid plan
  PREMIUM // Full-featured paid plan
}
