generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model Plan {
  id         String   @id @default(cuid())
  vision     String   @default("")
  milestone  String   @default("")
  completed  Boolean  @default(false)
  started    Boolean  @default(false)
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  created    DateTime @default(now())
  lastUpdate DateTime @updatedAt @map("last_update")
  userId     String?  @map("user_id") @db.Uuid
  goals      Goal[]
  users      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "plan_user_id_fkey")

  @@map("plans")
  @@schema("public")
}

model Goal {
  id          String        @id @default(cuid())
  planId      String        @map("plan_id")
  content     String
  status      String        @default("1")
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  goalHistory GoalHistory[]
  plan        Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  indicators  Indicator[]
  strategies  Strategy[]

  @@index([planId])
  @@map("goals")
  @@schema("public")
}

model GoalHistory {
  id         String    @id @default(cuid())
  goalId     String    @map("goal_id")
  planId     String    @map("plan_id")
  sequence   Int
  createdAt  DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  goal       Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([goalId, sequence])
  @@index([goalId])
  @@index([planId])
  @@map("goal_history")
  @@schema("public")
}

model Strategy {
  id              String            @id @default(cuid())
  goalId          String            @map("goal_id")
  planId          String            @map("plan_id")
  content         String
  weeks           String[]
  status          String            @default("1")
  frequency       Int
  createdAt      DateTime?          @default(now()) @db.Timestamptz(6) @map("created_at")
  goal            Goal              @relation(fields: [goalId], references: [id], onDelete: Cascade)
  strategyHistory StrategyHistory[]

  @@index([goalId])
  @@index([planId])
  @@map("strategies")
  @@schema("public")
}

model StrategyHistory {
  id          String    @id @default(cuid())
  strategyId  String    @map("strategy_id")
  planId      String    @map("plan_id")
  overdue     Boolean   @default(false)
  completed   Boolean   @default(false)
  firstUpdate DateTime? @map("first_update")
  lastUpdate  DateTime? @map("last_update")
  sequence    Int
  frequencies Boolean[] @default([])
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  strategy    Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@unique([strategyId, sequence])
  @@index([strategyId])
  @@index([planId])
  @@map("strategy_history")
  @@schema("public")
}

model Indicator {
  id               String             @id @default(cuid())
  goalId           String             @map("goal_id")
  planId           String             @map("plan_id")
  content          String
  metric           String
  initialValue     Int                @map("initial_value")
  goalValue        Int                @map("goal_value")
  status           String             @default("1")
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  indicatorHistory IndicatorHistory[]
  goal             Goal               @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([planId])
  @@map("indicators")
  @@schema("public")
}

model IndicatorHistory {
  id          String    @id @default(cuid())
  indicatorId String    @map("indicator_id")
  planId      String    @map("plan_id")
  value       Int       @default(0)
  sequence    Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@unique([indicatorId, sequence])
  @@index([indicatorId])
  @@index([planId])
  @@map("indicator_history")
  @@schema("public")
}

model Notification {
  id         String   @id @default(cuid())
  planId     String   @map("plan_id")
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  type       String
  message    String
  status     String
  sendDate   DateTime @map("send_date")
  created    DateTime @default(now())
  lastUpdate DateTime @updatedAt @map("last_update")
  userId     String?  @map("user_id") @db.Uuid
  users      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "plan_user_id_fkey")

  @@index([entityType, entityId])
  @@map("notifications")
  @@schema("public")
}

model Waitlist {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  position    Int       @unique @default(0)
  invited     Boolean   @default(false)
  inviteToken String?   @unique @map("invite_token")
  invitedAt   DateTime? @map("invited_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([email, id, inviteToken])
  @@map("waitlist")
  @@schema("public")
}

model Feedback {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  email       String?
  feedback    String
  createdAt   DateTime @default(now()) @map("created_at")
  new_user_id String?  @db.Uuid

  @@map("feedbacks")
  @@schema("public")
}

model User {
  old_id          String?
  email           String         @unique
  role            Role           @default(USER)
  waitlistId      String?        @unique @map("waitlist_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  id              String         @id @default(cuid()) @db.Uuid
  last_sign_in_at DateTime?      @db.Timestamptz(6)
  notifications   Notification[]
  plans           Plan[]
  Subscription    Subscription[]
  users           users          @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_users_auth")

  @@index([id], map: "idx_users_auth_id")
  @@map("users")
  @@schema("public")
}

model Subscription {
  id          String             @id @default(cuid())
  status      SubscriptionStatus @default(ACTIVE)
  plan        SubscriptionPlan
  startedAt   DateTime           @default(now()) @map("started_at")
  expiresAt   DateTime?          @map("expires_at")
  renewalDate DateTime?          @map("renewal_date")
  canceledAt  DateTime?          @map("canceled_at")
  trialEndsAt DateTime?          @map("trial_ends_at")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  userId      String?            @map("user_id") @db.Uuid
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "plan_user_id_fkey")

  @@map("subscriptions")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  users                       User?

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

enum Role {
  GUEST
  USER
  SUBSCRIBER
  ADMIN
  SUPERADMIN

  @@schema("public")
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  CANCELED
  EXPIRED
  PAUSED
  PENDING
  GRACE_PERIOD
  RENEWAL_DUE
  FAILED
  UPCOMING

  @@schema("public")
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
