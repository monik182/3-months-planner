// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Plan {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  vision      String
  milestone   String
  completed   Boolean  @default(false)
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  created     DateTime @default(now())
  lastUpdate  DateTime @updatedAt @map("last_update")

  goals       Goal[]

  @@map("plans")
}

model Goal {
  id          String      @id @default(cuid())
  planId      String      @map("plan_id")
  content     String
  status      String

  plan        Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  goalHistory GoalHistory[]
  strategies  Strategy[]
  indicators  Indicator[]

  @@index([planId])
  @@map("goals")
}

model GoalHistory {
  id         String   @id @default(cuid())
  goalId     String   @map("goal_id")
  planId     String   @map("plan_id")
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  sequence   Int

  goal       Goal    @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([planId])
  @@map("goal_history")
}

model Strategy {
  id             String        @id @default(cuid())
  goalId         String        @map("goal_id")
  planId         String        @map("plan_id")
  content        String
  weeks          String
  status         String

  goal           Goal          @relation(fields: [goalId], references: [id], onDelete: Cascade)
  strategyHistory StrategyHistory[]

  @@index([goalId])
  @@index([planId])
  @@map("strategies")
}

model StrategyHistory {
  id           String   @id @default(cuid())
  strategyId   String   @map("strategy_id")
  planId       String   @map("plan_id")
  overdue      Boolean  @default(false)
  completed    Boolean  @default(false)
  firstUpdate  DateTime? @map("first_update")
  lastUpdate   DateTime? @map("last_update")
  sequence     Int

  strategy     Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId])
  @@index([planId])
  @@map("strategy_history")
}

model Indicator {
  id             String             @id @default(cuid())
  goalId         String             @map("goal_id")
  planId         String             @map("plan_id")
  content        String
  metric         String
  startingValue  Int                @map("starting_value")
  goalValue      Int                @map("goal_value")
  status         String

  goal           Goal              @relation(fields: [goalId], references: [id], onDelete: Cascade)
  indicatorHistory IndicatorHistory[]

  @@index([goalId])
  @@index([planId])
  @@map("indicators")
}

model IndicatorHistory {
  id           String     @id @default(cuid())
  indicatorId  String     @map("indicator_id")
  planId       String     @map("plan_id")
  value        Int
  sequence     Int

  indicator    Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@index([indicatorId])
  @@index([planId])
  @@map("indicator_history")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  planId      String   @map("plan_id")
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  type        String
  message     String
  status      String
  sendDate    DateTime @map("send_date")
  created     DateTime @default(now())
  lastUpdate  DateTime @updatedAt @map("last_update")

  @@index([entityType, entityId])
  @@map("notifications")
}
